import os
import json
import random
import re
from datetime import datetime, timedelta
from collections import defaultdict, Counter
import telegram
from openai import OpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
TASK_HISTORY_FILE = "task_history.json"
TASK_TEMPLATES_FILE = "task_templates.json"
LAST_TOPIC_FILE = "last_topic.txt"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
ENHANCED_CATEGORIES = {
    "–º–∏–Ω–∏–º–∞–ª–∏–∑–º": {
        "subcategories": [
            "–∏–∑–±–∞–≤–ª–µ–Ω–∏–µ_–æ—Ç_–≤–µ—â–µ–π",
            "—Ü–∏—Ñ—Ä–æ–≤–æ–π_–¥–µ—Ç–æ–∫—Å", 
            "—É–ø—Ä–æ—â–µ–Ω–∏–µ_—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ_–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
            "–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è_—Ä–∞–∑–≥—Ä—É–∑–∫–∞",
            "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è_–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"
        ],
        "personas": "The Minimalists (–î–∂–æ—à—É–∞ –§–∏–ª–¥—Å –ú–∏–ª–±–µ—Ä–Ω –∏ –†–∞–π–∞–Ω –ù–∏–∫–æ–¥–µ–º—É—Å) –∏ –ú–∞—Ä–∏ –ö–æ–Ω–¥–æ",
        "tone": "—è—Å–Ω—ã–π, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π, –æ—Å–≤–æ–±–æ–∂–¥–∞—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ ¬´–º–µ–Ω—å—à–µ ‚Äî –∑–Ω–∞—á–∏—Ç –≥–ª—É–±–∂–µ¬ª. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ, –∞ –Ω–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ.",
        "emojis": {"task": "‚ú®", "benefit": "üå±", "action": "üöÄ"}
    },
    "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è": {
        "subcategories": [
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ä–µ–≥—É–ª—è—Ü–∏—è",
            "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ_–∏—Å–∫–∞–∂–µ–Ω–∏—è",
            "–º–µ–∂–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–µ_–æ—Ç–Ω–æ—à–µ–Ω–∏—è", 
            "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ",
            "—Å—Ç—Ä–µ—Å—Å_–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
            "–ø—Ä–∏–≤—ã—á–∫–∏_–∏_–ø–æ–≤–µ–¥–µ–Ω–∏–µ"
        ],
        "personas": "–ö–∞—Ä–ª –†–æ–¥–∂–µ—Ä—Å, –î—ç–Ω–∏–µ–ª –ö–∞–Ω–µ–º–∞–Ω –∏ –°—å—é–∑–∞–Ω –î—ç–≤–∏–¥",
        "tone": "–ø–æ–Ω–∏–º–∞—é—â–∏–π, –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –∫–∞–∫ –∫–ª—é—á–∏ –∫ –ø–æ–Ω–∏–º–∞–Ω–∏—é —Å–µ–±—è –∏ –¥—Ä—É–≥–∏—Ö. –ò—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫—É—é –≥–ª—É–±–∏–Ω—É –∏ —ç–º–ø–∞—Ç–∏—é.",
        "emojis": {"task": "üß†", "benefit": "üí°", "action": "üîç"}
    },
    "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å": {
        "subcategories": [
            "–º–µ–¥–∏—Ç–∞—Ü–∏—è_–∏_–¥—ã—Ö–∞–Ω–∏–µ",
            "–ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ_–≤_–º–æ–º–µ–Ω—Ç–µ",
            "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ_–∑–∞_–º—ã—Å–ª—è–º–∏",
            "—Ç–µ–ª–µ—Å–Ω–∞—è_–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å",
            "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å",
            "–ø—Ä–∏–Ω—è—Ç–∏–µ_–∏_–æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ"
        ],
        "personas": "–¢–∏—Ç –ù–∞—Ç –•–∞–Ω, –î–∂–æ–Ω –ö–∞–±–∞—Ç-–ó–∏–Ω–Ω –∏ –≠–∫—Ö–∞—Ä—Ç –¢–æ–ª–ª–µ",
        "tone": "–º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—ã–π, –ø–æ—ç—Ç–∏—á–Ω—ã–π, –∑–∞–º–µ–¥–ª—è—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –∫–∞–∫ –≥–ª–æ—Ç–æ–∫ —Ç–∏—à–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞–∑—ã –ø—Ä–∏—Ä–æ–¥—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.",
        "emojis": {"task": "üßò", "benefit": "üå∏", "action": "üåä"}
    },
    "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ": {
        "subcategories": [
            "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ_–≤—ã—Ä–∞–∂–µ–Ω–∏–µ",
            "–ø–∏—Å—å–º–æ_–∏_–ø–æ—ç–∑–∏—è",
            "–º—É–∑—ã–∫–∞_–∏_–∑–≤—É–∫–∏",
            "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ_–º—ã—à–ª–µ–Ω–∏–µ",
            "–∏–º–ø—Ä–æ–≤–∏–∑–∞—Ü–∏—è",
            "—Ä–µ–º–µ—Å–ª–æ_–∏_—Å–æ–∑–¥–∞–Ω–∏–µ"
        ],
        "personas": "–≠–ª–∏–∑–∞–±–µ—Ç –ì–∏–ª–±–µ—Ä—Ç, –û—Å—Ç–∏–Ω –ö–ª–µ–æ–Ω –∏ –ù–∏–ª –ì–µ–π–º–∞–Ω",
        "tone": "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –ø–æ—ç—Ç–∏—á–Ω—ã–π, –¥–µ—Ä–∑–∫–∏–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –∫–∞–∫ –∑–∞–∂–∏–≥–∞–ª–∫–∞ –¥–ª—è –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–æ—â—Ä—è–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ ¬´–∫—Ä–∞—Å–∏–≤—ã–µ –æ—à–∏–±–∫–∏¬ª.",
        "emojis": {"task": "üé®", "benefit": "‚ú®", "action": "üåà"}
    },
    "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è": {
        "subcategories": [
            "—Å–º—ã—Å–ª_–∏_—Ü–µ–ª—å",
            "—ç—Ç–∏–∫–∞_–∏_–º–æ—Ä–∞–ª—å",
            "–≤—Ä–µ–º—è_–∏_–≤–µ—á–Ω–æ—Å—Ç—å",
            "—Å–≤–æ–±–æ–¥–∞_–∏_–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            "–∏—Å—Ç–∏–Ω–∞_–∏_–ø–æ–∑–Ω–∞–Ω–∏–µ",
            "–∫—Ä–∞—Å–æ—Ç–∞_–∏_—ç—Å—Ç–µ—Ç–∏–∫–∞"
        ],
        "personas": "–°–µ–Ω–µ–∫–∞, –ê–ª–∞–Ω –£–æ—Ç—Ç—Å –∏ –ú–∞—Ä–∫ –ê–≤—Ä–µ–ª–∏–π",
        "tone": "—Ä–∞–∑–º—ã—à–ª—è—é—â–∏–π, –≤–µ—á–Ω—ã–π, –Ω–∞–±–ª—é–¥–∞—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∫–∞—Å–∞—Ç—å—Å—è ¬´—Å–º—ã—Å–ª–∞¬ª –∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π –≥–ª—É–±–æ–∫–∏–µ, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã.",
        "emojis": {"task": "üìú", "benefit": "‚è≥", "action": "üåå"}
    },
    "—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ": {
        "subcategories": [
            "—Ü–µ–Ω–Ω–æ—Å—Ç–∏_–∏_—É–±–µ–∂–¥–µ–Ω–∏—è",
            "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã",
            "—Ç–µ–Ω–µ–≤—ã–µ_–∞—Å–ø–µ–∫—Ç—ã",
            "–∂–∏–∑–Ω–µ–Ω–Ω–∞—è_–∏—Å—Ç–æ—Ä–∏—è",
            "–º–µ—á—Ç—ã_–∏_—Ü–µ–ª–∏",
            "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_–¥–∏–∞–ª–æ–≥"
        ],
        "personas": "–ö–∞—Ä–ª –Æ–Ω–≥, –ë—Ä–µ–Ω–µ –ë—Ä–∞—É–Ω –∏ –õ–∏–∑ –ì–∏–ª–±–µ—Ä—Ç",
        "tone": "–º—è–≥–∫–∏–π, –∏–Ω—Ç–∏–º–Ω—ã–π, —á–µ—Å—Ç–Ω—ã–π. –ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥—É—Ö–µ ¬´–ø–æ–≥–æ–≤–æ—Ä–∏ —Å —Å–æ–±–æ–π –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É¬ª. –ü–æ–æ—â—Ä—è–π —É—è–∑–≤–∏–º–æ—Å—Ç—å –∏ —Å–∞–º–æ–ø—Ä–∏–Ω—è—Ç–∏–µ.",
        "emojis": {"task": "ü™û", "benefit": "üíé", "action": "üóùÔ∏è"}
    },
    "–±–∏–∑–Ω–µ—Å": {
        "subcategories": [
            "–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ",
            "–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è",
            "–ø—Ä–∏–Ω—è—Ç–∏–µ_—Ä–µ—à–µ–Ω–∏–π",
            "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
            "—Ä–∞–±–æ—Ç–∞_–≤_–∫–æ–º–∞–Ω–¥–µ"
        ],
        "personas": "–°—Ç–∏–≤–µ–Ω –ö–æ–≤–∏, –°–µ—Ç –ì–æ–¥–∏–Ω –∏ –¢–∏–º –§–µ—Ä—Ä–∏—Å",
        "tone": "—á–µ—Ç–∫–∏–π, –ø—Ä–∞–≥–º–∞—Ç–∏—á–Ω—ã–π, —Å –∏—Å–∫—Ä–æ–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –º–∏–∫—Ä–æ-–ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤ –∏ –º—ã—à–ª–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –∏–∑–º–µ—Ä–∏–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.",
        "emojis": {"task": "üéØ", "benefit": "üìà", "action": "‚ö°"}
    },
    "–º–æ—Ç–∏–≤–∞—Ü–∏—è": {
        "subcategories": [
            "–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞_—Ü–µ–ª–µ–π",
            "–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ_–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π",
            "—ç–Ω–µ—Ä–≥–∏—è_–∏_–¥—Ä–∞–π–≤",
            "–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞",
            "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
            "–ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ_—É—Å–ø–µ—Ö–æ–≤"
        ],
        "personas": "–¢–æ–Ω–∏ –†–æ–±–±–∏–Ω—Å, –ú–µ–ª –†–æ–±–±–∏–Ω—Å –∏ –î–∂–µ–π–º—Å –ö–ª–∏—Ä",
        "tone": "—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, —Å—Ç—Ä–∞—Å—Ç–Ω—ã–π, —Ñ–æ–∫—É—Å–∏—Ä—É—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –∫–∞–∫ –∑–∞—Ä—è–¥ –≤ —Å–ø–∏–Ω—É. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é.",
        "emojis": {"task": "üî•", "benefit": "üí™", "action": "üöÄ"}
    },
    "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π_–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": {
        "subcategories": [
            "—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ_—ç–º–æ—Ü–∏–π",
            "—ç–º–ø–∞—Ç–∏—è",
            "—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_—Ä–µ–∞–∫—Ü–∏—è–º–∏",
            "—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ_–Ω–∞–≤—ã–∫–∏",
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_–≥–∏–±–∫–æ—Å—Ç—å",
            "–∫–æ–Ω—Ñ–ª–∏–∫—Ç_—Ä–µ–∑–æ–ª—é—Ü–∏—è"
        ],
        "personas": "–î—ç–Ω–∏–µ–ª –ì–æ—É–ª–º–∞–Ω, –ú–∞—Ä–∫ –ë—Ä—ç–∫–µ—Ç—Ç –∏ –°—å—é–∑–∞–Ω –î—ç–≤–∏–¥",
        "tone": "—Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π, –≥–ª—É–±–æ–∫–æ —á–µ–ª–æ–≤–µ—á–Ω—ã–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –º—è–≥–∫–∞—è –ø—Ä–æ–∫–∞—á–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á—É—Ç–∫–æ—Å—Ç–∏ –∫ —Å–µ–±–µ –∏ –¥—Ä—É–≥–∏–º. –ó–∞–¥–∞–≤–∞–π –Ω–µ—É–¥–æ–±–Ω—ã–µ, –Ω–æ –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
        "emojis": {"task": "üíù", "benefit": "ü§ù", "action": "üí´"}
    },
    "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ": {
        "subcategories": [
            "–≤–ª–∏—è–Ω–∏–µ_–∏_–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
            "–ø—Ä–∏–Ω—è—Ç–∏–µ_—Ä–µ—à–µ–Ω–∏–π",
            "—Ä–∞–∑–≤–∏—Ç–∏–µ_–¥—Ä—É–≥–∏—Ö",
            "–≤–∏–¥–µ–Ω–∏–µ_–∏_—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
            "–ª–∏—á–Ω—ã–π_–ø—Ä–∏–º–µ—Ä",
            "–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å"
        ],
        "personas": "–°–∞–π–º–æ–Ω –°–∏–Ω–µ–∫, –î–∂–æ–Ω –ú–∞–∫—Å–≤–µ–ª–ª –∏ –ë—Ä–µ–Ω–µ –ë—Ä–∞—É–Ω",
        "tone": "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Å –≤—ã—Å–æ–∫–æ–π –ø–ª–∞–Ω–∫–æ–π. –ó–∞–¥–∞–Ω–∏—è ‚Äî –≤—ã–±–æ—Ä –±—ã—Ç—å —Å–∏–ª—å–Ω—ã–º –∏ –¥–æ–±—Ä—ã–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–ª—É–∂–µ–Ω–∏–∏ –¥—Ä—É–≥–∏–º.",
        "emojis": {"task": "üëë", "benefit": "üåü", "action": "üéñÔ∏è"}
    },
    "—Å–ø–æ—Ä—Ç": {
        "subcategories": [
            "—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
            "–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è_–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞",
            "–∑–¥–æ—Ä–æ–≤—ã–µ_–ø—Ä–∏–≤—ã—á–∫–∏",
            "–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
            "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è",
            "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
        ],
        "personas": "–î–∂–µ–π–º—Å –ö–ª–∏—Ä (–∞–≤—Ç–æ—Ä ¬´Atomic Habits¬ª), –î—ç–≤–∏–¥ –ì–æ–≥–≥–∏–Ω—Å –∏ –ö–µ–ª–ª–∏ –°—Ç–∞—Ä—Ä–µ—Ç—Ç",
        "tone": "–±–æ–¥—Ä—ã–π, —Ç–µ–ª–µ—Å–Ω—ã–π, –ø—Ä–æ–∫–∞—á–∏–≤–∞—é—â–∏–π. –ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–∞–∫ –º–∏–∫—Ä–æ–≤–æ–ª–Ω—ã –∫ —Å–∏–ª–µ, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –∏–ª–∏ –≥–∏–±–∫–æ—Å—Ç–∏. –ü–æ–æ—â—Ä—è–π –¥–≤–∏–∂–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã.",
        "emojis": {"task": "üí™", "benefit": "‚ö°", "action": "üèÉ"}
    },
    "—é–º–æ—Ä_–∂–∏–∑–Ω–∏": {
        "subcategories": [
            "–∏—Ä–æ–Ω–∏—è_–∏_—Å–∞–º–æ–∏—Ä–æ–Ω–∏—è",
            "–ª–µ–≥–∫–æ—Å—Ç—å_–≤–æ—Å–ø—Ä–∏—è—Ç–∏—è",
            "–∏–≥—Ä–∏–≤–æ—Å—Ç—å",
            "–∞–±—Å—É—Ä–¥_–∏_–ø–∞—Ä–∞–¥–æ–∫—Å—ã",
            "—Å–º–µ—Ö_–Ω–∞–¥_–ø—Ä–æ–±–ª–µ–º–∞–º–∏",
            "—Ä–∞–¥–æ—Å—Ç—å_–≤_–º–µ–ª–æ—á–∞—Ö"
        ],
        "personas": "–ö—É—Ä—Ç –í–æ–Ω–Ω–µ–≥—É—Ç, –î–∂–µ–Ω –°–∏–Ω—Å–µ—Ä–æ –∏ –†–∞–π–∞–Ω –•–æ–ª–∏–¥–µ–π (—Å –ª–µ–≥–∫–æ—Å—Ç—å—é)",
        "tone": "–∏—Ä–æ–Ω–∏—á–Ω—ã–π, –ª—ë–≥–∫–∏–π, –º–µ—Ç–∫–∏–π. –ó–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å ¬´—É–ª—ã–±–∫—É —Å–∫–≤–æ–∑—å –º—É–¥—Ä–æ—Å—Ç—å¬ª. –î–æ–±–∞–≤—å —â–µ–ø–æ—Ç–∫—É –∑–¥–æ—Ä–æ–≤–æ–≥–æ —Å–∞—Ä–∫–∞–∑–º–∞ –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç.",
        "emojis": {"task": "üòÑ", "benefit": "üòâ", "action": "üé≠"}
    },
    "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ_–º—ã—à–ª–µ–Ω–∏–µ": {
        "subcategories": [
            "–∞–Ω–∞–ª–∏–∑_–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "–ª–æ–≥–∏—á–µ—Å–∫–∏–µ_–æ—à–∏–±–∫–∏",
            "–∏—Å—Ç–æ—á–Ω–∏–∫–∏_–∏_—Ñ–∞–∫—Ç—ã",
            "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ_—Ç–æ—á–∫–∏_–∑—Ä–µ–Ω–∏—è",
            "—Å–∏—Å—Ç–µ–º–Ω–æ–µ_–º—ã—à–ª–µ–Ω–∏–µ",
            "–ø—Ä–∏–Ω—è—Ç–∏–µ_—Ä–µ—à–µ–Ω–∏–π"
        ],
        "personas": "–î—ç–Ω–∏–µ–ª –ö–∞–Ω–µ–º–∞–Ω, –ù–∞—Å—Å–∏–º –¢–∞–ª–µ–± –∏ –î–∂–æ—Ä–¥–∞–Ω –ü–∏—Ç–µ—Ä—Å–æ–Ω (–≤ –º—è–≥–∫–æ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–º —Å—Ç–∏–ª–µ)",
        "tone": "–ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π, –ª–æ–≥–∏—á–Ω—ã–π, —Å –≤—ã–∑–æ–≤–æ–º. –ó–∞–¥–∞–Ω–∏—è ‚Äî –∫–∞–∫ –≤—Å—Ç—Ä—è—Å–∫–∞ –¥–ª—è —É–º–∞. –ó–∞–¥–∞–≤–∞–π –Ω–µ—É–¥–æ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã.",
        "emojis": {"task": "ü§î", "benefit": "üß©", "action": "üîç"}
    }
}

# –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
TASK_TYPES = {
    "–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ": {
        "description": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        "examples": ["—Å–¥–µ–ª–∞—Ç—å", "–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å", "—Å–æ–∑–¥–∞—Ç—å", "–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å", "–≤—ã–ø–æ–ª–Ω–∏—Ç—å"],
        "duration": "15-30 –º–∏–Ω—É—Ç",
        "focus": "–¥–µ–π—Å—Ç–≤–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    },
    "—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–µ": {
        "description": "–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –∏ —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑", 
        "examples": ["–ø–æ–¥—É–º–∞—Ç—å", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–≤—Å–ø–æ–º–Ω–∏—Ç—å", "–æ—Å–æ–∑–Ω–∞—Ç—å", "–ø–æ—Ä–∞–∑–º—ã—à–ª—è—Ç—å"],
        "duration": "10-15 –º–∏–Ω—É—Ç",
        "focus": "–ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –∏–Ω—Å–∞–π—Ç—ã"
    },
    "—Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ": {
        "description": "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "examples": ["–Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å", "–Ω–∞–ø–∏—Å–∞—Ç—å", "—Å–æ—á–∏–Ω–∏—Ç—å", "–ø—Ä–∏–¥—É–º–∞—Ç—å", "—Å–æ–∑–¥–∞—Ç—å"],
        "duration": "20-45 –º–∏–Ω—É—Ç",
        "focus": "—Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
    },
    "—Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ": {
        "description": "–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏",
        "examples": ["–ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å", "–ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å", "–ø–æ–º–æ—á—å", "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è", "–≤—ã—Ä–∞–∑–∏—Ç—å"],
        "duration": "10-30 –º–∏–Ω—É—Ç",
        "focus": "—Å–≤—è–∑—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    },
    "–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω–æ–µ": {
        "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∏–∑—É—á–µ–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –º–∏—Ä–∞",
        "examples": ["–ø–æ–Ω–∞–±–ª—é–¥–∞—Ç—å", "–∏–∑—É—á–∏—Ç—å", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", "–∑–∞–º–µ—Ç–∏—Ç—å", "–æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ"],
        "duration": "15-25 –º–∏–Ω—É—Ç",
        "focus": "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ"
    }
}

class TaskHistoryManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–¥–∞–Ω–∏–π"""
    
    def __init__(self, history_file=TASK_HISTORY_FILE):
        self.history_file = history_file
        self.history = self.load_history()
    
    def load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π"""
        if os.path.exists(self.history_file):
            try:
                with open(self.history_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                pass
        
        return {
            "tasks": [],
            "last_categories": [],
            "category_usage_count": defaultdict(int),
            "subcategory_usage_count": defaultdict(int),
            "task_type_usage_count": defaultdict(int)
        }
    
    def save_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞–Ω–∏–π"""
        with open(self.history_file, 'w', encoding='utf-8') as f:
            json.dump(self.history, f, ensure_ascii=False, indent=2)
    
    def add_task(self, category, subcategory, task_type, task_text):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        task_entry = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "category": category,
            "subcategory": subcategory,
            "task_type": task_type,
            "task_text": task_text,
            "keywords": self.extract_keywords(task_text)
        }
        
        self.history["tasks"].append(task_entry)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.history["category_usage_count"][category] += 1
        self.history["subcategory_usage_count"][f"{category}:{subcategory}"] += 1
        self.history["task_type_usage_count"][task_type] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
        self.history["last_categories"].append(category)
        if len(self.history["last_categories"]) > 7:
            self.history["last_categories"] = self.history["last_categories"][-7:]
        
        self.save_history()
    
    def extract_keywords(self, text):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP)
        words = re.findall(r'\b[–∞-—è—ë]{4,}\b', text.lower())
        # –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        stop_words = {'—ç—Ç–æ—Ç', '—ç—Ç–æ–≥–æ', '—ç—Ç–æ–π', '—ç—Ç–æ–º—É', '—ç—Ç–∏–º', '—ç—Ç–æ–º', '—ç—Ç–∏—Ö', '—ç—Ç–∏–º–∏', 
                     '–∫–æ—Ç–æ—Ä—ã–π', '–∫–æ—Ç–æ—Ä–∞—è', '–∫–æ—Ç–æ—Ä–æ–µ', '–∫–æ—Ç–æ—Ä—ã–µ', '–∫–æ—Ç–æ—Ä—ã—Ö', '–∫–æ—Ç–æ—Ä—ã–º', '–∫–æ—Ç–æ—Ä—ã–º–∏',
                     '–º–æ–∂–Ω–æ', '–Ω—É–∂–Ω–æ', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–¥–æ–ª–∂–Ω–æ', '–¥–æ–ª–∂–Ω—ã', '–±—É–¥–µ—Ç', '–±—É–¥—É—Ç',
                     '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞', '–≤—á–µ—Ä–∞', '—Å–µ–π—á–∞—Å', '–ø–æ—Ç–æ–º', '—Ç–æ–≥–¥–∞', '–∑–¥–µ—Å—å', '—Ç–∞–º'}
        keywords = [word for word in words if word not in stop_words]
        return list(set(keywords))[:10]  # –ú–∞–∫—Å–∏–º—É–º 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    def get_recent_categories(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        recent_tasks = [
            task for task in self.history["tasks"]
            if datetime.strptime(task["date"], "%Y-%m-%d") > cutoff_date
        ]
        return [task["category"] for task in recent_tasks]
    
    def get_recent_subcategories(self, category, days=14):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        recent_tasks = [
            task for task in self.history["tasks"]
            if (datetime.strptime(task["date"], "%Y-%m-%d") > cutoff_date and 
                task["category"] == category)
        ]
        return [task["subcategory"] for task in recent_tasks]
    
    def get_recent_task_types(self, days=5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        recent_tasks = [
            task for task in self.history["tasks"]
            if datetime.strptime(task["date"], "%Y-%m-%d") > cutoff_date
        ]
        return [task["task_type"] for task in recent_tasks]
    
    def get_recent_keywords(self, days=7):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        cutoff_date = datetime.now() - timedelta(days=days)
        recent_tasks = [
            task for task in self.history["tasks"]
            if datetime.strptime(task["date"], "%Y-%m-%d") > cutoff_date
        ]
        all_keywords = []
        for task in recent_tasks:
            all_keywords.extend(task.get("keywords", []))
        return list(set(all_keywords))

class IntelligentTaskSelector:
    """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏—è"""
    
    def __init__(self, history_manager):
        self.history = history_manager
    
    def select_task_parameters(self):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è"""
        
        # 1. –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = self._select_category()
        
        # 2. –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategory = self._select_subcategory(category)
        
        # 3. –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
        task_type = self._select_task_type()
        
        return category, subcategory, task_type
    
    def _select_category(self):
        """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        recent_categories = self.history.get_recent_categories(days=7)
        available_categories = [
            cat for cat in ENHANCED_CATEGORIES.keys() 
            if cat not in recent_categories
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –±–µ—Ä–µ–º –≤—Å–µ
        if not available_categories:
            available_categories = list(ENHANCED_CATEGORIES.keys())
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        category_weights = {}
        total_usage = sum(self.history.history["category_usage_count"].values()) or 1
        
        for category in available_categories:
            usage_count = self.history.history["category_usage_count"].get(category, 0)
            # –ß–µ–º –º–µ–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–µ–º –±–æ–ª—å—à–µ –≤–µ—Å
            weight = max(1, total_usage - usage_count * 2)
            category_weights[category] = weight
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        categories = list(category_weights.keys())
        weights = list(category_weights.values())
        
        return random.choices(categories, weights=weights)[0]
    
    def _select_subcategory(self, category):
        """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        subcategories = ENHANCED_CATEGORIES[category]["subcategories"]
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 14 –¥–Ω–µ–π –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        recent_subcategories = self.history.get_recent_subcategories(category, days=14)
        available_subcategories = [
            subcat for subcat in subcategories 
            if subcat not in recent_subcategories
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –±–µ—Ä–µ–º –≤—Å–µ
        if not available_subcategories:
            available_subcategories = subcategories
        
        return random.choice(available_subcategories)
    
    def _select_task_type(self):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–∏–ø—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
        recent_types = self.history.get_recent_task_types(days=5)
        available_types = [
            task_type for task_type in TASK_TYPES.keys() 
            if task_type not in recent_types
        ]
        
        # –ï—Å–ª–∏ –≤—Å–µ —Ç–∏–ø—ã –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å, –±–µ—Ä–µ–º –≤—Å–µ
        if not available_types:
            available_types = list(TASK_TYPES.keys())
        
        return random.choice(available_types)

class EnhancedPromptGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, history_manager):
        self.history = history_manager
    
    def create_prompt(self, category, subcategory, task_type):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        
        category_info = ENHANCED_CATEGORIES[category]
        task_type_info = TASK_TYPES[task_type]
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        recent_keywords = self.history.get_recent_keywords(days=14)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
        diverse_examples = self._get_diverse_examples(subcategory, task_type)
        
        prompt = f"""–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ–º–µ "{category}" –≤ —Å—Ç–∏–ª–µ {category_info['personas']}.

–ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞–π {task_type} –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø–æ–¥—Ç–µ–º–µ "{subcategory}".

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º
2. –°–¢–†–û–ì–û –ò–ó–ë–ï–ì–ê–ô —ç—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ —Å–ª–æ–≤–∞: {', '.join(recent_keywords[:15])}
3. –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {task_type_info['description']}
4. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {task_type_info['duration']}
5. –§–æ–∫—É—Å: {task_type_info['focus']}

–ü–†–ò–ú–ï–†–´ –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–• –ü–û–î–•–û–î–û–í –¥–ª—è "{subcategory}":
{diverse_examples}

–°–¢–ò–õ–¨ –ò–ó–õ–û–ñ–ï–ù–ò–Ø: {category_info['tone']}

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê (–∏—Å–ø–æ–ª—å–∑—É–π –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —ç–º–æ–¥–∑–∏):
{category_info['emojis']['task']} *–ó–∞–¥–∞–Ω–∏–µ –¥–Ω—è:*
[–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.]

{category_info['emojis']['benefit']} *–í —á—ë–º –ø–æ–ª—å–∑–∞?*
[–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.]

{category_info['emojis']['action']} *–ö–∞–∫ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?*
[–ü—Ä–∏–∑—ã–≤ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö. 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.]

–í–ê–ñ–ù–´–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø:
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤—ã—à–µ
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∏–ø–∞ "–≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç/–≤–µ—â—å"
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
- –ë–£–î–¨ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º
- –í–µ—Å—å —Ç–µ–∫—Å—Ç –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–æ "–∑–∞–¥–∞–Ω–∏–µ" –≤ —Ç–µ–∫—Å—Ç–µ —Å–∞–º–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

        return prompt
    
    def _get_diverse_examples(self, subcategory, task_type):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤"""
        
        examples_map = {
            # –ú–∏–Ω–∏–º–∞–ª–∏–∑–º
            "–∏–∑–±–∞–≤–ª–µ–Ω–∏–µ_–æ—Ç_–≤–µ—â–µ–π": [
                "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π 5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –∏—Ö –∏—Å—Ç–æ—Ä–∏—é",
                "–°–æ–∑–¥–∞–π –∫–∞–ø—Å—É–ª—å–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ 10 –ª—é–±–∏–º—ã—Ö –≤–µ—â–µ–π",
                "–£—Å—Ç—Ä–æ–π –∞—É–∫—Ü–∏–æ–Ω –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤–µ—â–µ–π —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π",
                "–ü—Ä–∏–º–µ—Ä—å —Ä–æ–ª—å –∫—É—Ä–∞—Ç–æ—Ä–∞ –º—É–∑–µ—è –¥–ª—è —Å–≤–æ–µ–≥–æ –≥–∞—Ä–¥–µ—Ä–æ–±–∞"
            ],
            "—Ü–∏—Ñ—Ä–æ–≤–æ–π_–¥–µ—Ç–æ–∫—Å": [
                "–ó–∞–º–µ–Ω–∏ –æ–¥–Ω–æ —Ü–∏—Ñ—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤—ã–º",
                "–°–æ–∑–¥–∞–π —Ä–∏—Ç—É–∞–ª —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "–£—Å—Ç—Ä–æ–π —á–∞—Å —Ç–∏—à–∏–Ω—ã –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ –æ—Ç —Ä—É–∫–∏ –≤–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
            ],
            
            # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
            "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è_—Ä–µ–≥—É–ª—è—Ü–∏—è": [
                "–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç—É —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
                "–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π —Ç–µ—Ö–Ω–∏–∫—É '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ñ–∏–Ω–≥'",
                "–í–µ–¥—å –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏ —Å–µ–±—è",
                "–°–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"
            ],
            
            # –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å
            "–º–µ–¥–∏—Ç–∞—Ü–∏—è_–∏_–¥—ã—Ö–∞–Ω–∏–µ": [
                "–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π –¥—ã—Ö–∞–Ω–∏–µ –≤ —Ä–∏—Ç–º–µ —Ö–æ–¥—å–±—ã",
                "–°–æ–∑–¥–∞–π –º–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–≤—É–∫–æ–≤ –≤–æ–∫—Ä—É–≥",
                "–ü–æ–ø—Ä–æ–±—É–π –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É 4-7-8",
                "–ú–µ–¥–∏—Ç–∏—Ä—É–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –æ–¥–Ω–æ–º –æ—Ä–≥–∞–Ω–µ —á—É–≤—Å—Ç–≤"
            ],
            
            # –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ
            "—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ_–≤—ã—Ä–∞–∂–µ–Ω–∏–µ": [
                "–ù–∞—Ä–∏—Å—É–π —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏",
                "–°–æ–∑–¥–∞–π –∫–æ–ª–ª–∞–∂ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                "–°–¥–µ–ª–∞–π —Å–∫—É–ª—å–ø—Ç—É—Ä—É –∏–∑ –ø–æ–¥—Ä—É—á–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                "–ù–∞—Ä–∏—Å—É–π –ø–æ—Ä—Ç—Ä–µ—Ç, –Ω–µ –≥–ª—è–¥—è –Ω–∞ –±—É–º–∞–≥—É"
            ]
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        examples = examples_map.get(subcategory, [
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–∏–≤—ã—á–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é",
            "–°–æ–∑–¥–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –∏–∑ –æ–±—ã—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
            "–ò—Å—Å–ª–µ–¥—É–π —Ç–µ–º—É —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç",
            "–ü–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å –Ω–µ–æ–±—ã—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–æ–π"
        ])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
        if task_type == "—Ä–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ–µ":
            examples = [ex for ex in examples if any(word in ex.lower() for word in ["–ø–æ–¥—É–º–∞–π", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π", "—Ä–∞–∑–º—ã—Å–ª–∏", "–∏—Å—Å–ª–µ–¥—É–π"])]
        elif task_type == "—Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ":
            examples = [ex for ex in examples if any(word in ex.lower() for word in ["—Å–æ–∑–¥–∞–π", "–Ω–∞—Ä–∏—Å—É–π", "—Å–æ—á–∏–Ω–∏", "–ø—Ä–∏–¥—É–º–∞–π"])]
        
        return "\n".join(f"- {example}" for example in examples[:3])

def check_task_uniqueness(new_task_text, history_manager, similarity_threshold=0.6):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    
    new_keywords = history_manager.extract_keywords(new_task_text)
    recent_keywords = history_manager.get_recent_keywords(days=14)
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    intersection = set(new_keywords) & set(recent_keywords)
    if len(new_keywords) > 0:
        similarity_score = len(intersection) / len(new_keywords)
    else:
        similarity_score = 0
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure_patterns = [
        r'–≤—ã–±–µ—Ä–∏.*–æ–¥–∏–Ω.*–ø—Ä–µ–¥–º–µ—Ç',
        r'–≤—ã–±–µ—Ä–∏—Ç–µ.*–æ–¥–∏–Ω.*–ø—Ä–µ–¥–º–µ—Ç', 
        r'–Ω–∞–π–¥–∏.*–≤–µ—â—å',
        r'–∏–∑–±–∞–≤—å—Å—è.*–æ—Ç.*–ø—Ä–µ–¥–º–µ—Ç'
    ]
    
    has_repetitive_structure = any(
        re.search(pattern, new_task_text.lower()) 
        for pattern in structure_patterns
    )
    
    is_unique = (similarity_score < similarity_threshold and 
                not has_repetitive_structure)
    
    return is_unique, similarity_score, intersection

def generate_enhanced_daily_task(client, chat_id, bot):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    history_manager = TaskHistoryManager()
    task_selector = IntelligentTaskSelector(history_manager)
    prompt_generator = EnhancedPromptGenerator(history_manager)
    
    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏—è
    category, subcategory, task_type = task_selector.select_task_parameters()
    
    print(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
    print(f"   –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}")
    print(f"   –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task_type}")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
    prompt = prompt_generator.create_prompt(category, subcategory, task_type)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    max_attempts = 5
    for attempt in range(max_attempts):
        print(f"üéØ –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {attempt + 1}/{max_attempts}")
        
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.8  # –ü–æ–≤—ã—à–∞–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
            )
            
            task_text = response.choices[0].message.content.strip()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            is_unique, similarity_score, common_keywords = check_task_uniqueness(
                task_text, history_manager
            )
            
            if is_unique:
                print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
                history_manager.add_task(category, subcategory, task_type, task_text)
                
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                try:
                    bot.send_message(chat_id=chat_id, text=task_text, parse_mode="Markdown")
                    print(f"üì§ –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                    return True
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    bot.send_message(chat_id=chat_id, text=task_text)
                    return True
            
            else:
                print(f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ (—Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity_score:.2f})")
                print(f"   –û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {common_keywords}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                prompt += f"\n\n–í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±—ã–ª–∞ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∞ –Ω–∞ –Ω–µ–¥–∞–≤–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–≤: {', '.join(common_keywords)}. –ë—É–¥—å –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º!"
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    from openai import OpenAI
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã)
    client = OpenAI(api_key="your-openai-key")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π...")
    
    history_manager = TaskHistoryManager()
    task_selector = IntelligentTaskSelector(history_manager)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    for i in range(3):
        print(f"\n--- –¢–µ—Å—Ç {i+1} ---")
        category, subcategory, task_type = task_selector.select_task_parameters()
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {subcategory}")
        print(f"–¢–∏–ø: {task_type}")

